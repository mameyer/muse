#pragma checksum "/home/mmeyer/projects/Muse/Muse/Views/Recommendation/Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6b1b2396203c5af8e2b19412c33d396a5f15fed1"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Recommendation_Index), @"mvc.1.0.view", @"/Views/Recommendation/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Recommendation/Index.cshtml", typeof(AspNetCore.Views_Recommendation_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/home/mmeyer/projects/Muse/Muse/Views/_ViewImports.cshtml"
using Muse;

#line default
#line hidden
#line 2 "/home/mmeyer/projects/Muse/Muse/Views/_ViewImports.cshtml"
using Muse.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6b1b2396203c5af8e2b19412c33d396a5f15fed1", @"/Views/Recommendation/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9c0eaa3a50510a1c4dfa4ed028e6c50d66c085e7", @"/Views/_ViewImports.cshtml")]
    public class Views_Recommendation_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Muse.Models.RecommendationOptions>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(41, 3900, true);
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">Recommendations</h1>
</div>

<div id=""recommendations-form"">
    <h5>Settings</h5>
    <div class=""dx-fieldset"">
        <div class=""dx-field"">
            <div class=""dx-field-label""></div>
            <div class=""dx-field-value"">
                <div id=""load""></div>
            </div>
        </div>
        <div class=""dx-field"">
            <div class=""dx-field-label"">Artists:</div>
            <div class=""dx-field-value"">
                <div id=""artists""></div>
            </div>
        </div>
        <div class=""dx-field"">
            <div class=""dx-field-label"">Tracks:</div>
            <div class=""dx-field-value"">
                <div id=""tracks""></div>
            </div>
        </div>
        <div class=""dx-field"">
            <div class=""dx-field-label"">Genres:</div>
            <div class=""dx-field-value"">
                <div id=""genres""></div>
            </div>
        </div>
        <div class=""dx-field"">
            <div class=""dx-field-l");
            WriteLiteral(@"abel"">Acousticness:</div>
            <div class=""dx-field-value"">
                <div id=""acousticness""></div>
            </div>
        </div>
        <div class=""dx-field"">
            <div class=""dx-field-label"">Danceability:</div>
            <div class=""dx-field-value"">
                <div id=""danceability""></div>
            </div>
        </div>
        <div class=""dx-field"">
            <div class=""dx-field-label"">DurationMs:</div>
            <div class=""dx-field-value"">
                <div id=""durationMs""></div>
            </div>
        </div>
        <div class=""dx-field"">
            <div class=""dx-field-label"">Energy:</div>
            <div class=""dx-field-value"">
                <div id=""energy""></div>
            </div>
        </div>
        <div class=""dx-field"">
            <div class=""dx-field-label"">Instrumentalness:</div>
            <div class=""dx-field-value"">
                <div id=""instrumentalness""></div>
            </div>
        </div>
        <div class=""dx-field"">
      ");
            WriteLiteral(@"      <div class=""dx-field-label"">Liveness:</div>
            <div class=""dx-field-value"">
                <div id=""liveness""></div>
            </div>
        </div>
        <div class=""dx-field"">
            <div class=""dx-field-label"">Loudness:</div>
            <div class=""dx-field-value"">
                <div id=""loudness""></div>
            </div>
        </div>
        <div class=""dx-field"">
            <div class=""dx-field-label"">Popularity:</div>
            <div class=""dx-field-value"">
                <div id=""popularity""></div>
            </div>
        </div>
        <div class=""dx-field"">
            <div class=""dx-field-label"">Speechiness:</div>
            <div class=""dx-field-value"">
                <div id=""speechiness""></div>
            </div>
        </div>
        <div class=""dx-field"">
            <div class=""dx-field-label"">Tempo:</div>
            <div class=""dx-field-value"">
                <div id=""tempo""></div>
            </div>
        </div>
        <div class=""dx-field"">
      ");
            WriteLiteral(@"      <div class=""dx-field-label"">Valence:</div>
            <div class=""dx-field-value"">
                <div id=""valence""></div>
            </div>
        </div>
        <div class=""dx-field"">
            <div class=""dx-field-label"">Mode:</div>
            <div class=""dx-field-value"">
                <div id=""mode""></div>
            </div>
        </div>
        <div class=""dx-field"">
            <div class=""dx-field-label"">TimeSignature:</div>
            <div class=""dx-field-value"">
                <div id=""timeSignature""></div>
            </div>
        </div>
    </div>
</div>
<div id=""recommendations-result"">
    <h5>Result</h5>
    <div id=""recommendations""></div>
</div>
<div id=""devices-list"">
    <h5>Devices</h5>
    <div id=""devices""></div>

    <div id=""current-track-info"">
        
    </div>
</div>

");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(3959, 73, true);
                WriteLiteral("\n    <script type=\"text/javascript\">\n        var recommendationOptions = ");
                EndContext();
                BeginContext(4033, 97, false);
#line 130 "/home/mmeyer/projects/Muse/Muse/Views/Recommendation/Index.cshtml"
                               Write(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model, Newtonsoft.Json.Formatting.Indented)));

#line default
#line hidden
                EndContext();
                BeginContext(4130, 152, true);
                WriteLiteral(";\n\n        $(\"#artists\").dxTagBox({\n            dataSource: DevExpress.data.AspNet.createStore({\n                key: \"name\",\n                loadUrl: \'");
                EndContext();
                BeginContext(4283, 33, false);
#line 135 "/home/mmeyer/projects/Muse/Muse/Views/Recommendation/Index.cshtml"
                     Write(Url.Action("Get", "TopArtistApi"));

#line default
#line hidden
                EndContext();
                BeginContext(4316, 240, true);
                WriteLiteral("\'\n            }),\n            displayExpr: \"name\",\n            valueExpr: \"id\"\n        });\n\n        $(\"#tracks\").dxTagBox({\n            dataSource: DevExpress.data.AspNet.createStore({\n                key: \"name\",\n                loadUrl: \'");
                EndContext();
                BeginContext(4557, 32, false);
#line 144 "/home/mmeyer/projects/Muse/Muse/Views/Recommendation/Index.cshtml"
                     Write(Url.Action("Get", "TopTrackApi"));

#line default
#line hidden
                EndContext();
                BeginContext(4589, 240, true);
                WriteLiteral("\'\n            }),\n            displayExpr: \"name\",\n            valueExpr: \"id\"\n        });\n\n        $(\"#genres\").dxTagBox({\n            dataSource: DevExpress.data.AspNet.createStore({\n                key: \"name\",\n                loadUrl: \'");
                EndContext();
                BeginContext(4830, 32, false);
#line 153 "/home/mmeyer/projects/Muse/Muse/Views/Recommendation/Index.cshtml"
                     Write(Url.Action("Get", "TopGenreApi"));

#line default
#line hidden
                EndContext();
                BeginContext(4862, 5929, true);
                WriteLiteral(@"'
            }),
            displayExpr: ""name"",
            valueExpr: ""name""
        });

        $(""#acousticness"").dxNumberBox({
            value: recommendationOptions.Acousticness.Target,
            max: recommendationOptions.Acousticness.Max,
            min: recommendationOptions.Acousticness.Min,
            onValueChanged: function(data) {
                recommendationOptions.Acousticness.Target = data.value;
            }
        });

        $(""#danceability"").dxNumberBox({
            value: recommendationOptions.Danceability.Target,
            max: recommendationOptions.Danceability.Max,
            min: recommendationOptions.Danceability.Min,
            onValueChanged: function(data) {
                recommendationOptions.Danceability.Target = data.value;
            }
        });

        $(""#durationMs"").dxNumberBox({
            value: recommendationOptions.DurationMs.Target,
            max: recommendationOptions.DurationMs.Max,
            min: recommendationOptions.DurationMs.Min,");
                WriteLiteral(@"
            onValueChanged: function(data) {
                recommendationOptions.DurationMs.Target = data.value;
            }
        });

        $(""#energy"").dxNumberBox({
            value: recommendationOptions.Energy.Target,
            max: recommendationOptions.Energy.Max,
            min: recommendationOptions.Energy.Min,
            onValueChanged: function(data) {
                recommendationOptions.Energy.Target = data.value;
            }
        });

        $(""#instrumentalness"").dxNumberBox({
            value: recommendationOptions.Instrumentalness.Target,
            max: recommendationOptions.Instrumentalness.Max,
            min: recommendationOptions.Instrumentalness.Min,
            onValueChanged: function(data) {
                recommendationOptions.Instrumentalness.Target = data.value;
            }
        });

        $(""#liveness"").dxNumberBox({
            value: recommendationOptions.Liveness.Target,
            max: recommendationOptions.Liveness.Max,
            min: reco");
                WriteLiteral(@"mmendationOptions.Liveness.Min,
            onValueChanged: function(data) {
                recommendationOptions.Liveness.Target = data.value;
            }
        });

        $(""#loudness"").dxNumberBox({
            value: recommendationOptions.Loudness.Target,
            max: recommendationOptions.Loudness.Max,
            min: recommendationOptions.Loudness.Min,
            onValueChanged: function(data) {
                recommendationOptions.Loudness.Target = data.value;
            }
        });

        $(""#popularity"").dxNumberBox({
            value: recommendationOptions.Popularity.Target,
            max: recommendationOptions.Popularity.Max,
            min: recommendationOptions.Popularity.Min,
            onValueChanged: function(data) {
                recommendationOptions.Popularity.Target = data.value;
            }
        });

        $(""#speechiness"").dxNumberBox({
            value: recommendationOptions.Speechiness.Target,
            max: recommendationOptions.Speechiness.Max,
   ");
                WriteLiteral(@"         min: recommendationOptions.Speechiness.Min,
            onValueChanged: function(data) {
                recommendationOptions.Speechiness.Target = data.value;
            }
        });

        $(""#tempo"").dxNumberBox({
            value: recommendationOptions.Tempo.Target,
            max: recommendationOptions.Tempo.Max,
            min: recommendationOptions.Tempo.Min,
            onValueChanged: function(data) {
                recommendationOptions.Tempo.Target = data.value;
            }
        });

        $(""#valence"").dxNumberBox({
            value: recommendationOptions.Valence.Target,
            max: recommendationOptions.Valence.Max,
            min: recommendationOptions.Valence.Min,
            onValueChanged: function(data) {
                recommendationOptions.Valence.Target = data.value;
            }
        });

        $(""#mode"").dxNumberBox({
            value: recommendationOptions.Mode.Target,
            max: recommendationOptions.Mode.Max,
            min: recommendatio");
                WriteLiteral(@"nOptions.Mode.Min,
            onValueChanged: function(data) {
                recommendationOptions.Mode.Target = data.value;
            }
        });

        $(""#timeSignature"").dxNumberBox({
            value: recommendationOptions.TimeSignature.Target,
            max: recommendationOptions.TimeSignature.Max,
            min: recommendationOptions.TimeSignature.Min,
            onValueChanged: function(data) {
                recommendationOptions.TimeSignature.Target = data.value;
            }
        });

        $(""#recommendations"").dxList({
            dataSource: [],
            height: 800,
            allowItemDeleting: false,
            itemTemplate: function(data, index) {
                var result = $(""<div>"").addClass(""recommendation"");
                $(""<iframe>"").attr(""src"", ""https://open.spotify.com/embed/track/"" + data.uri)
                    .attr(""height"", 90)
                    .attr(""width"", 275)
                    .attr(""frameborder"", 0)
                    .attr(""allowtrans");
                WriteLiteral(@"parency"", ""true"")
                    .attr(""allow"", ""encrypted-media"")
                    .appendTo(result);
                return result;
            }
        });

        $(""#load"").dxButton({
            text: ""Load"",
            onClick: function() {
                var artists = $(""#artists"").dxTagBox(""instance"").option(""selectedItems"");
                recommendationOptions.Artists = artists.map(x => x.id);

                var tracks = $(""#tracks"").dxTagBox(""instance"").option(""selectedItems"");
                recommendationOptions.Tracks = tracks.map(x => x.id);
                
                var genres = $(""#genres"").dxTagBox(""instance"").option(""selectedItems"");
                recommendationOptions.Genres = genres.map(x => x.name);

                $.ajax({
                    url: '");
                EndContext();
                BeginContext(10792, 38, false);
#line 306 "/home/mmeyer/projects/Muse/Muse/Views/Recommendation/Index.cshtml"
                     Write(Url.Action("Get", "RecommendationApi"));

#line default
#line hidden
                EndContext();
                BeginContext(10830, 1018, true);
                WriteLiteral(@"',
                    data: {
                        options: JSON.stringify(recommendationOptions)
                    },
                    success: function (result) {
                        console.debug(result);
                        $(""#recommendations"").dxList(""instance"").option(""dataSource"", result.songs);
                    },
                    error: function () {
                    }
                });
            }
        });

        $(""#devices"").dxList({
            dataSource: [],
            height: 300,
            allowItemDeleting: false,
            itemTemplate: function(data, index) {
                var result = $(""<div>"").addClass(""device"");
                $(""<div>"").text(data.name).appendTo(result);
                $(""<div>"").text(data.type).appendTo(result);
                return result;
            }
        });

        function getDevices() {
            console.debug(""get devices.."");
            var devices = null;
            $.ajax({
                url: '");
                EndContext();
                BeginContext(11849, 30, false);
#line 336 "/home/mmeyer/projects/Muse/Muse/Views/Recommendation/Index.cshtml"
                 Write(Url.Action("Get", "DeviceApi"));

#line default
#line hidden
                EndContext();
                BeginContext(11879, 354, true);
                WriteLiteral(@"',
                success: function (result) {
                    devices = result;
                },
                error: function () {
                },
                async: false
            });
            return devices;
        }

        function getPlayback() {
            var playback = null;
            $.ajax({
                url: '");
                EndContext();
                BeginContext(12234, 32, false);
#line 350 "/home/mmeyer/projects/Muse/Muse/Views/Recommendation/Index.cshtml"
                 Write(Url.Action("Get", "PlaybackApi"));

#line default
#line hidden
                EndContext();
                BeginContext(12266, 692, true);
                WriteLiteral(@"',
                success: function (result) {
                    console.debug(result);
                    playback = result;
                },
                error: function () {
                },
                async: false
            });
            return playback;
        }

        function loadDevices() {
            var devices = getDevices();
            if (!devices) {
                return;
            }
            $(""#devices"").dxList(""instance"").option(""dataSource"", devices);
            if (devices.length > 0) {
                var playback = getPlayback();
                console.debug(playback);
            }
        }

        loadDevices();
    </script>
");
                EndContext();
            }
            );
            BeginContext(12960, 548, true);
            WriteLiteral(@"
<style>
    #form {
        margin-top: 25px;
    }

    #recommendations-form, #recommendations-result, #devices-list {
        background-color: rgba(191, 191, 191, 0.15);
    }

    #recommendations-form {
        padding: 20px;
        bottom: 0;
        right: 0;
        width: 500px;
        top: 0;
        float: left;
    }

    #recommendations-result {
        float: left;
        margin-left: 10px;
        width: 320px;
    }

    #devices-list {
        float: right;
        margin-left: 10px;
        width: 500px;
    }
</style>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Muse.Models.RecommendationOptions> Html { get; private set; }
    }
}
#pragma warning restore 1591
